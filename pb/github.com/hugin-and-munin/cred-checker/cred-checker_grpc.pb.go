// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cred-checker.proto

package cred_checker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredCheckerClient is the client API for CredChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredCheckerClient interface {
	GetDigitalMinistryCreditsState(ctx context.Context, in *GetDigitalMinistryCreditsStateRequest, opts ...grpc.CallOption) (*GetDigitalMinistryCreditsStateResponse, error)
}

type credCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewCredCheckerClient(cc grpc.ClientConnInterface) CredCheckerClient {
	return &credCheckerClient{cc}
}

func (c *credCheckerClient) GetDigitalMinistryCreditsState(ctx context.Context, in *GetDigitalMinistryCreditsStateRequest, opts ...grpc.CallOption) (*GetDigitalMinistryCreditsStateResponse, error) {
	out := new(GetDigitalMinistryCreditsStateResponse)
	err := c.cc.Invoke(ctx, "/cred_checker.CredChecker/GetDigitalMinistryCreditsState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredCheckerServer is the server API for CredChecker service.
// All implementations must embed UnimplementedCredCheckerServer
// for forward compatibility
type CredCheckerServer interface {
	GetDigitalMinistryCreditsState(context.Context, *GetDigitalMinistryCreditsStateRequest) (*GetDigitalMinistryCreditsStateResponse, error)
	mustEmbedUnimplementedCredCheckerServer()
}

// UnimplementedCredCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedCredCheckerServer struct {
}

func (UnimplementedCredCheckerServer) GetDigitalMinistryCreditsState(context.Context, *GetDigitalMinistryCreditsStateRequest) (*GetDigitalMinistryCreditsStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDigitalMinistryCreditsState not implemented")
}
func (UnimplementedCredCheckerServer) mustEmbedUnimplementedCredCheckerServer() {}

// UnsafeCredCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredCheckerServer will
// result in compilation errors.
type UnsafeCredCheckerServer interface {
	mustEmbedUnimplementedCredCheckerServer()
}

func RegisterCredCheckerServer(s grpc.ServiceRegistrar, srv CredCheckerServer) {
	s.RegisterService(&CredChecker_ServiceDesc, srv)
}

func _CredChecker_GetDigitalMinistryCreditsState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDigitalMinistryCreditsStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredCheckerServer).GetDigitalMinistryCreditsState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cred_checker.CredChecker/GetDigitalMinistryCreditsState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredCheckerServer).GetDigitalMinistryCreditsState(ctx, req.(*GetDigitalMinistryCreditsStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredChecker_ServiceDesc is the grpc.ServiceDesc for CredChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cred_checker.CredChecker",
	HandlerType: (*CredCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDigitalMinistryCreditsState",
			Handler:    _CredChecker_GetDigitalMinistryCreditsState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cred-checker.proto",
}
